// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Nivl/go-rest-tools/router (interfaces: HTTPResponse)

// Package mockrouter is a generated GoMock package.
package mockrouter

import (
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockHTTPResponse is a mock of HTTPResponse interface
type MockHTTPResponse struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPResponseMockRecorder
}

// MockHTTPResponseMockRecorder is the mock recorder for MockHTTPResponse
type MockHTTPResponseMockRecorder struct {
	mock *MockHTTPResponse
}

// NewMockHTTPResponse creates a new mock instance
func NewMockHTTPResponse(ctrl *gomock.Controller) *MockHTTPResponse {
	mock := &MockHTTPResponse{ctrl: ctrl}
	mock.recorder = &MockHTTPResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHTTPResponse) EXPECT() *MockHTTPResponseMockRecorder {
	return m.recorder
}

// Created mocks base method
func (m *MockHTTPResponse) Created(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "Created", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Created indicates an expected call of Created
func (mr *MockHTTPResponseMockRecorder) Created(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Created", reflect.TypeOf((*MockHTTPResponse)(nil).Created), arg0)
}

// Header mocks base method
func (m *MockHTTPResponse) Header() http.Header {
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(http.Header)
	return ret0
}

// Header indicates an expected call of Header
func (mr *MockHTTPResponseMockRecorder) Header() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockHTTPResponse)(nil).Header))
}

// NoContent mocks base method
func (m *MockHTTPResponse) NoContent() {
	m.ctrl.Call(m, "NoContent")
}

// NoContent indicates an expected call of NoContent
func (mr *MockHTTPResponseMockRecorder) NoContent() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NoContent", reflect.TypeOf((*MockHTTPResponse)(nil).NoContent))
}

// Ok mocks base method
func (m *MockHTTPResponse) Ok(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "Ok", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ok indicates an expected call of Ok
func (mr *MockHTTPResponseMockRecorder) Ok(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ok", reflect.TypeOf((*MockHTTPResponse)(nil).Ok), arg0)
}
