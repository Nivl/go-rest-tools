// Code generated by mockery v1.0.0
package mockdb

import mock "github.com/stretchr/testify/mock"

// Queryable is an autogenerated mock type for the Queryable type
type Queryable struct {
	mock.Mock
}

// Exec provides a mock function with given fields: query, arg
func (_m *Queryable) Exec(query string, arg ...interface{}) (int64, error) {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, arg...)
	ret := _m.Called(_ca...)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, ...interface{}) int64); ok {
		r0 = rf(query, arg...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(query, arg...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: dest, query, args
func (_m *Queryable) Get(dest interface{}, query string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, dest, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...interface{}) error); ok {
		r0 = rf(dest, query, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NamedExec provides a mock function with given fields: query, arg
func (_m *Queryable) NamedExec(query string, arg interface{}) (int64, error) {
	ret := _m.Called(query, arg)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, interface{}) int64); ok {
		r0 = rf(query, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = rf(query, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NamedGet provides a mock function with given fields: dest, query, args
func (_m *Queryable) NamedGet(dest interface{}, query string, args interface{}) error {
	ret := _m.Called(dest, query, args)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string, interface{}) error); ok {
		r0 = rf(dest, query, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NamedSelect provides a mock function with given fields: dest, query, args
func (_m *Queryable) NamedSelect(dest interface{}, query string, args interface{}) error {
	ret := _m.Called(dest, query, args)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string, interface{}) error); ok {
		r0 = rf(dest, query, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Select provides a mock function with given fields: dest, query, args
func (_m *Queryable) Select(dest interface{}, query string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, dest, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...interface{}) error); ok {
		r0 = rf(dest, query, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
