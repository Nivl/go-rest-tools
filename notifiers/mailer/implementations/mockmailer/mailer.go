// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Nivl/go-rest-tools/notifiers/mailer (interfaces: Mailer)

// Package mockmailer is a generated GoMock package.
package mockmailer

import (
	mailer "github.com/Nivl/go-rest-tools/notifiers/mailer"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMailer is a mock of Mailer interface
type MockMailer struct {
	ctrl     *gomock.Controller
	recorder *MockMailerMockRecorder
}

// MockMailerMockRecorder is the mock recorder for MockMailer
type MockMailerMockRecorder struct {
	mock *MockMailer
}

// NewMockMailer creates a new mock instance
func NewMockMailer(ctrl *gomock.Controller) *MockMailer {
	mock := &MockMailer{ctrl: ctrl}
	mock.recorder = &MockMailerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMailer) EXPECT() *MockMailerMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockMailer) Send(arg0 *mailer.Message) error {
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockMailerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMailer)(nil).Send), arg0)
}

// SendStackTrace mocks base method
func (m *MockMailer) SendStackTrace(arg0 []byte, arg1 string, arg2 map[string]string) error {
	ret := m.ctrl.Call(m, "SendStackTrace", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendStackTrace indicates an expected call of SendStackTrace
func (mr *MockMailerMockRecorder) SendStackTrace(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendStackTrace", reflect.TypeOf((*MockMailer)(nil).SendStackTrace), arg0, arg1, arg2)
}
