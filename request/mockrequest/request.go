// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Nivl/go-rest-tools/request (interfaces: Request)

// Package mockrequest is a generated GoMock package.
package mockrequest

import (
	reflect "reflect"

	go_logger "github.com/Nivl/go-logger"
	go_reporter "github.com/Nivl/go-reporter"
	request "github.com/Nivl/go-rest-tools/request"
	auth "github.com/Nivl/go-rest-tools/security/auth"
	gomock "github.com/golang/mock/gomock"
)

// MockRequest is a mock of Request interface
type MockRequest struct {
	ctrl     *gomock.Controller
	recorder *MockRequestMockRecorder
}

// MockRequestMockRecorder is the mock recorder for MockRequest
type MockRequestMockRecorder struct {
	mock *MockRequest
}

// NewMockRequest creates a new mock instance
func NewMockRequest(ctrl *gomock.Controller) *MockRequest {
	mock := &MockRequest{ctrl: ctrl}
	mock.recorder = &MockRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRequest) EXPECT() *MockRequestMockRecorder {
	return m.recorder
}

// ID mocks base method
func (m *MockRequest) ID() string {
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockRequestMockRecorder) ID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockRequest)(nil).ID))
}

// Logger mocks base method
func (m *MockRequest) Logger() go_logger.Logger {
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(go_logger.Logger)
	return ret0
}

// Logger indicates an expected call of Logger
func (mr *MockRequestMockRecorder) Logger() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockRequest)(nil).Logger))
}

// Params mocks base method
func (m *MockRequest) Params() interface{} {
	ret := m.ctrl.Call(m, "Params")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Params indicates an expected call of Params
func (mr *MockRequestMockRecorder) Params() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Params", reflect.TypeOf((*MockRequest)(nil).Params))
}

// Reporter mocks base method
func (m *MockRequest) Reporter() go_reporter.Reporter {
	ret := m.ctrl.Call(m, "Reporter")
	ret0, _ := ret[0].(go_reporter.Reporter)
	return ret0
}

// Reporter indicates an expected call of Reporter
func (mr *MockRequestMockRecorder) Reporter() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reporter", reflect.TypeOf((*MockRequest)(nil).Reporter))
}

// Response mocks base method
func (m *MockRequest) Response() request.Response {
	ret := m.ctrl.Call(m, "Response")
	ret0, _ := ret[0].(request.Response)
	return ret0
}

// Response indicates an expected call of Response
func (mr *MockRequestMockRecorder) Response() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Response", reflect.TypeOf((*MockRequest)(nil).Response))
}

// Session mocks base method
func (m *MockRequest) Session() *auth.Session {
	ret := m.ctrl.Call(m, "Session")
	ret0, _ := ret[0].(*auth.Session)
	return ret0
}

// Session indicates an expected call of Session
func (mr *MockRequestMockRecorder) Session() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Session", reflect.TypeOf((*MockRequest)(nil).Session))
}

// Signature mocks base method
func (m *MockRequest) Signature() string {
	ret := m.ctrl.Call(m, "Signature")
	ret0, _ := ret[0].(string)
	return ret0
}

// Signature indicates an expected call of Signature
func (mr *MockRequestMockRecorder) Signature() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signature", reflect.TypeOf((*MockRequest)(nil).Signature))
}

// String mocks base method
func (m *MockRequest) String() string {
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockRequestMockRecorder) String() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockRequest)(nil).String))
}

// User mocks base method
func (m *MockRequest) User() *auth.User {
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(*auth.User)
	return ret0
}

// User indicates an expected call of User
func (mr *MockRequestMockRecorder) User() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockRequest)(nil).User))
}
